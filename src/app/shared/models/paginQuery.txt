UserPaginationDTO usersPagination = new UserPaginationDTO();
var query = _dbContext.Users.Where(x => !x.IsDeleted).AsQueryable();

if (!string.IsNullOrEmpty(model.GlobalFilter))
{
    string filter = model.GlobalFilter.Trim().ToLower();
    query = query.Where(u => u.FirstName.ToLower().Trim().Contains(filter)
        || u.LastName.ToLower().Trim().Contains(filter)
        || u.Email.ToLower().Trim().Contains(filter));
}

// Sorting
if (!string.IsNullOrEmpty(model.SortField) && !string.IsNullOrEmpty(model.SortOrder))
{
    switch (model.SortField.ToLower())
    {
        case "firstname":
            query = (model.SortOrder.ToLower() == "desc") ? query.OrderByDescending(u => u.FirstName) : query.OrderBy(u => u.FirstName);
            break;
        case "lastname":
            query = (model.SortOrder.ToLower() == "desc") ? query.OrderByDescending(u => u.LastName) : query.OrderBy(u => u.LastName);
            break;
        case "email":
            query = (model.SortOrder.ToLower() == "desc") ? query.OrderByDescending(u => u.Email) : query.OrderBy(u => u.Email);
            break;
        // Add more cases for additional fields if needed
        default:
            break;
    }
}

usersPagination.TotalRecords = await query.CountAsync();

if (model.PageNumber == 0)
{
    usersPagination.RecordsList = await query.ToListAsync();
    return usersPagination;
}

int skipCount = (model.PageNumber - 1) * model.PageSize;
var users = await query.Skip(skipCount).Take(model.PageSize).ToListAsync();
usersPagination.RecordsList = users;

return usersPagination;
